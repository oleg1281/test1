import cdsapi
import datetime
import numpy as np
import xarray as xr
import cdsapi
import os

c = cdsapi.Client(
    url='https://cds.climate.copernicus.eu/api',
    key='d1c02362-b7bf-453b-9da4-ce9ddad97925'
)

filename = "era5_surface_part2.nc"

def download_surface_part2(filename):
    """
        –°–∫–∞—á–∏–≤–∞–µ—Ç surface-–ø–æ–ª—è ERA5 –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ datetime (—à–∞–≥ 6 —á–∞—Å–æ–≤)
        """
    print('üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (single-levels_part2)...')

    c.retrieve(
        'reanalysis-era5-single-levels',
        {
            'product_type': 'reanalysis',
            'variable': [
                'total_precipitation',
                'toa_incident_solar_radiation'
            ],
            'year': '2025',
            'month': '05',
            'day': ['14'],
            'time': ['00:00', '06:00', '12:00', '18:00'],
            'format': 'netcdf',
            'grid': [1.0, 1.0],

        },
        filename
    )
    print(f'‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ surface_part2 –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚Üí {filename}')


def change_part2():
    ds = xr.load_dataset(filename, decode_timedelta=True)

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    ds = ds.rename({
        "valid_time": "time",
        "tp": "total_precipitation_6hr",
        "latitude": "lat",
        "longitude": "lon",
        "tisr": "toa_incident_solar_radiation"
    })

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—å batch
    ds = ds.expand_dims(dim={"batch": [0]})

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º time –≤ timedelta64[ns]
    base_time = ds.time.values[0]
    time_delta = ds.time.values - base_time
    ds = ds.assign_coords(time=time_delta)

    # –î–æ–±–∞–≤–ª—è–µ–º datetime –∏ –¥–µ–ª–∞–µ–º –µ–≥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ–π
    datetime = ds.time.values + base_time
    ds["datetime"] = (("batch", "time"), np.expand_dims(datetime, axis=0))
    ds = ds.set_coords("datetime")

    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    ds = ds.drop_vars(["number", "expver"], errors="ignore")

    # –ú–µ–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –æ—Å–µ–π —É –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    ds["toa_incident_solar_radiation"] = ds["toa_incident_solar_radiation"].transpose("batch", "time", "lat", "lon")
    ds["total_precipitation_6hr"] = ds["total_precipitation_6hr"].transpose("batch", "time", "lat", "lon")

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —à–∏—Ä–æ—Ç–µ
    ds = ds.sortby("lat")

    # –ü—Ä–∏–≤–æ–¥–∏–º lat/lon –∫ float32
    ds = ds.assign_coords({
        "lat": ds["lat"].astype(np.float32),
        "lon": ds["lon"].astype(np.float32)
    })

    # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –ø–µ—Ä–≤—ã—Ö 6 –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤
    #ds = ds.isel(time=slice(0, 42))

    # –£–¥–∞–ª—è–µ–º batch –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–¥–µ–ª–∞–µ–º –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
    if "batch" in ds.coords:
        ds = ds.swap_dims({"batch": "batch"})  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å
        ds = ds.drop_vars("batch")  # —É–±–∏—Ä–∞–µ–º –∫–∞–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É

    print('–û–±—Ä–∞–±–æ—Ç–∫–∞ ds_surface_part2 –∑–∞–≤–µ—Ä—à–µ–Ω–∞')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    ds.to_netcdf("delete/era5_surface_part2.nc", format="NETCDF4_CLASSIC")

download_surface_part2(filename)
change_part2()